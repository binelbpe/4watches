<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>4WATCHES Admin - Add Product</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Croppie CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css">
    
    <style>
      :root {
        --primary-color: #bca374;
        --primary-dark: #a68b5b;
        --secondary-color: #2c3e50;
        --light-bg: #f8f9fa;
      }

      body {
        background-color: var(--light-bg);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      }

      /* Sidebar Styling */
      #sidebar {
        background: var(--secondary-color);
        min-width: 250px;
        max-width: 250px;
        min-height: 100vh;
        transition: all 0.3s;
      }

      #sidebar .sidebar-header {
        padding: 15px;
        background: var(--primary-color);
        display: flex;
        align-items: center;
      }

      #sidebar ul li a {
        padding: 10px 20px;
        display: block;
        color: #fff;
        text-decoration: none;
        transition: all 0.3s;
      }

      #sidebar ul li a:hover {
        background: var(--primary-color);
      }

      #sidebar ul li.active > a {
        background: var(--primary-color);
      }

      /* Form Container */
      .form-container {
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
        padding: 20px;
        margin: 20px;
      }

      /* Form Styling */
      .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.25rem rgba(188, 163, 116, 0.25);
      }

      .form-label {
        color: var(--secondary-color);
        font-weight: 500;
      }

      /* Image Preview */
      .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin: 10px 0;
      }

      .preview-image {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 5px;
      }

      /* Error Messages */
      .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
      }

      /* Button Styling */
      .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
      }

      .btn-primary:hover {
        background-color: var(--primary-dark);
        border-color: var(--primary-dark);
      }

      /* Navbar Styling */
      .admin-navbar {
        background-color: var(--primary-color);
        padding: 15px 0;
      }

      .navbar-logo {
        height: 40px;
        width: auto;
        border-radius: 5px;
      }

      .sidebar-logo {
        height: 45px;
        width: auto;
        border-radius: 5px;
        margin-right: 10px;
      }

      /* Responsive Adjustments */
      @media (max-width: 768px) {
        #sidebar {
          margin-left: -250px;
        }
        #sidebar.active {
          margin-left: 0;
        }
        .form-container {
          margin: 10px;
          padding: 15px;
        }
      }

      /* Modal Styling */
      .modal-content {
        border-radius: 10px;
        overflow: hidden;
      }

      .modal-header {
        background-color: var(--primary-color);
        color: white;
      }

      /* Remove Image Button */
      .remove-image-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        padding: 2px 6px;
        font-size: 12px;
        border-radius: 3px;
      }
    </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar admin-navbar">
    <div class="container-fluid">
      <a class="navbar-brand d-flex align-items-center" href="#">
        <img src="/images/logo.png" alt="4WATCHES Logo" class="navbar-logo me-2">
        <span class="text-white">4WATCHES</span>
      </a>
      <div class="d-flex">
        <a href="/admin/logout" class="btn btn-outline-light">
          <i class="fas fa-sign-out-alt me-2"></i>Logout
        </a>
      </div>
    </div>
  </nav>

  <div class="d-flex">
    <!-- Sidebar -->
    <nav id="sidebar">
      <div class="sidebar-header">
        <img src="/images/logo.png" alt="4WATCHES Logo" class="sidebar-logo">
        <h3 class="text-white mb-0">4WATCHES</h3>
      </div>
      <ul class="list-unstyled components">
        <li>
          <a href="/admin/adminHome">
            <i class="fas fa-home me-2"></i>Dashboard
          </a>
        </li>
        <li class="active">
          <a href="/admin/Product">
            <i class="fas fa-box me-2"></i>Products
          </a>
        </li>
        <li>
          <a href="/admin/User">
            <i class="fas fa-users me-2"></i>Users
          </a>
        </li>
        <li>
          <a href="/admin/Category">
            <i class="fas fa-tags me-2"></i>Categories
          </a>
        </li>
        <li>
          <a href="/admin/order">
            <i class="fas fa-shopping-cart me-2"></i>Orders
          </a>
        </li>
        <li>
          <a href="/admin/coupons">
            <i class="fas fa-ticket-alt me-2"></i>Coupons
          </a>
        </li>
        <li>
          <a href="/admin/sales">
            <i class="fas fa-chart-line me-2"></i>Sales Report
          </a>
        </li>
      </ul>
    </nav>

    <!-- Main Content -->
    <div class="flex-grow-1">
      <div class="container-fluid">
        <div class="form-container">
          <h2 class="mb-4">Add New Product</h2>
          
          <form class="form-horizontal" id="formaddproduct" action="/admin/addProduct" method="post" enctype="multipart/form-data" onsubmit="return validateForm(event)">
            <div class="mb-3">
              <label class="form-label">Product Name</label>
              <input type="text" class="form-control" name="productName" oninput="validateField('productName')">
              <span id="productName-error" class="error-message"></span>
            </div>

            <div class="mb-3">
              <label class="form-label">Category</label>
              <select name="category" class="form-control" onchange="validateField('category')">
                <option value="">Choose category...</option>
                <% for(let i=0; i < data.length; i++) { %>
                  <option value="<%= data[i].category %>"><%= data[i].category %></option>
                <% } %>
              </select>
              <span id="category-error" class="error-message"></span>
            </div>

            <div class="mb-3">
              <label class="form-label">Description</label>
              <textarea class="form-control" name="description" rows="3" oninput="validateField('description')"></textarea>
              <span id="description-error" class="error-message"></span>
            </div>

            <div class="mb-3">
              <label class="form-label">About Product</label>
              <textarea class="form-control" name="about" rows="3" oninput="validateField('about')"></textarea>
              <span id="about-error" class="error-message"></span>
            </div>

            <div class="mb-3">
              <label class="form-label">Price</label>
              <input type="number" class="form-control" name="price" min="1" oninput="validateField('price')">
              <span id="price-error" class="error-message"></span>
            </div>

            <div class="mb-3">
              <label class="form-label">Stock</label>
              <input type="number" class="form-control" name="stock" min="0" oninput="validateField('stock')">
              <span id="stock-error" class="error-message"></span>
            </div>

            <div class="mb-3">
              <label class="form-label">Upload Images</label>
              <div id="image-preview-container" class="d-flex flex-wrap"></div>
              <div id="image-cropper" style="display: none;"></div>
              <input type="file" id="imageInput" name="images" class="form-control" accept="image/*" multiple onchange="previewImages(event)">
              <input type="hidden" name="image" id="croppedImageInput">
              <span id="image-error" class="error-message"></span>
              <button type="button" class="btn btn-primary mt-2" onclick="openCropModal()" style="display: none;" id="cropButton">
                Select Image to Crop
              </button>
            </div>

            <div class="mb-3">
              <label class="form-label">Offer Price</label>
              <input type="number" class="form-control" name="offerPrice" min="0" oninput="validateField('offerPrice')">
              <span id="offerPrice-error" class="error-message"></span>
            </div>

            <div class="text-end">
              <a href="/admin/product" class="btn btn-secondary me-2">Cancel</a>
              <button type="submit" class="btn btn-primary">Add Product</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Crop Modal -->
  <div class="modal fade" id="cropModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="cropModalImageContainer"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" onclick="cropAndReplaceImage()">Crop & Replace</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Add these scripts before closing body tag -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>

  <script>
    let croppie = null;
    let selectedImageElement = null;
    let originalImageSrc = null;

    // Preview images
    function previewImages(event) {
      const fileInput = event.target;
      const files = fileInput.files;
      const imagePreviewContainer = document.getElementById('image-preview-container');
      const allowedExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
      const maxFileSize = 5 * 1024 * 1024; // 5MB max file size

      // Clear existing previews
      imagePreviewContainer.innerHTML = '';

      // Validate number of files
      if (files.length === 0) {
        displayErrorMessage("images", "Please select at least one image");
        return;
      }

      if (files.length > 5) {
        Swal.fire({
          icon: 'error',
          title: 'Too many images',
          text: 'You can only select up to five images.'
        });
        fileInput.value = '';
        return;
      }

      // Validate each file
      for (let file of files) {
        const fileName = file.name.toLowerCase();
        const fileExtension = fileName.split('.').pop();

        // Check file type
        if (!allowedExtensions.includes(fileExtension)) {
          Swal.fire({
            icon: 'error',
            title: 'Invalid file type',
            text: 'Only JPG, JPEG, PNG, GIF, and WEBP images are allowed.'
          });
          fileInput.value = '';
          return;
        }

        // Check file size
        if (file.size > maxFileSize) {
          Swal.fire({
            icon: 'error',
            title: 'File too large',
            text: `${file.name} is too large. Maximum file size is 5MB.`
          });
          fileInput.value = '';
          return;
        }

        // Validate image dimensions
        const img = new Image();
        img.src = URL.createObjectURL(file);
        img.onload = function() {
          URL.revokeObjectURL(this.src);
          if (this.width < 200 || this.height < 200) {
            Swal.fire({
              icon: 'error',
              title: 'Image too small',
              text: `${file.name} is too small. Minimum dimensions are 200x200 pixels.`
            });
            fileInput.value = '';
            imagePreviewContainer.innerHTML = '';
            return;
          }
        };
      }

      // If all validations pass, show previews
      Array.from(files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = function(e) {
          const container = document.createElement('div');
          container.className = 'position-relative d-inline-block me-2 mb-2';

          const img = document.createElement('img');
          img.src = e.target.result;
          img.className = 'preview-image';
          img.dataset.index = index;
          img.style.cursor = 'pointer';
          img.onclick = () => handleImageClick(img);

          const removeBtn = document.createElement('button');
          removeBtn.type = 'button';
          removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 end-0';
          removeBtn.innerHTML = '×';
          removeBtn.onclick = () => removeImage(container, index);

          const cropBtn = document.createElement('button');
          cropBtn.type = 'button';
          cropBtn.className = 'btn btn-primary btn-sm position-absolute bottom-0 end-0';
          cropBtn.innerHTML = '<i class="fas fa-crop-alt"></i>';
          cropBtn.onclick = () => handleImageClick(img);

          container.appendChild(img);
          container.appendChild(removeBtn);
          container.appendChild(cropBtn);
          imagePreviewContainer.appendChild(container);
        };
        reader.readAsDataURL(file);
      });

      // Show the crop button
      document.getElementById('cropButton').style.display = 'inline-block';
    }

    // Handle image click for cropping
    function handleImageClick(img) {
      selectedImageElement = img;
      originalImageSrc = img.src;

      const cropModalImageContainer = document.getElementById('cropModalImageContainer');
      cropModalImageContainer.innerHTML = '';

      if (croppie) {
        croppie.destroy();
      }

      croppie = new Croppie(cropModalImageContainer, {
        viewport: { width: 300, height: 300, type: 'square' },
        boundary: { width: 400, height: 400 },
        showZoomer: true,
        enableOrientation: true
      });

      croppie.bind({ url: originalImageSrc });
      var cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
      cropModal.show();
    }

    // Crop and replace image
    function cropAndReplaceImage() {
      croppie.result({
        type: 'base64',
        size: 'viewport',
        format: 'jpeg'
      }).then(function(croppedImage) {
        if (selectedImageElement) {
          selectedImageElement.src = croppedImage;
          
          // Update the file input with the cropped image
          const fileInput = document.querySelector('input[name="images"]');
          const files = Array.from(fileInput.files);
          const index = parseInt(selectedImageElement.dataset.index);
          
          // Convert base64 to file
          fetch(croppedImage)
            .then(res => res.blob())
            .then(blob => {
              const file = new File([blob], `cropped-image-${index}.jpg`, { type: 'image/jpeg' });
              files[index] = file;
              
              const dataTransfer = new DataTransfer();
              files.forEach(file => dataTransfer.items.add(file));
              fileInput.files = dataTransfer.files;
            });
        }
        
        var cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
        cropModal.hide();
      });
    }

    // Remove image
    function removeImage(container, index) {
      const fileInput = document.querySelector('input[name="images"]');
      const files = Array.from(fileInput.files);
      files.splice(index, 1);
      
      const dataTransfer = new DataTransfer();
      files.forEach(file => dataTransfer.items.add(file));
      fileInput.files = dataTransfer.files;
      
      container.remove();
      
      // Hide crop button if no images
      if (files.length === 0) {
        document.getElementById('cropButton').style.display = 'none';
      }
    }

    // Add mobile sidebar toggle
    document.addEventListener('DOMContentLoaded', function() {
      const sidebarToggle = document.createElement('button');
      sidebarToggle.classList.add('btn', 'btn-primary', 'd-md-none', 'position-fixed');
      sidebarToggle.style.cssText = 'top: 10px; left: 10px; z-index: 1000;';
      sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
      document.body.appendChild(sidebarToggle);

      sidebarToggle.addEventListener('click', function() {
        const sidebar = document.getElementById('sidebar');
        sidebar.classList.toggle('active');
      });
    });
  </script>

  <!-- Add this validation code before the closing </body> tag -->
  <script>
    function validateForm(event) {
      event.preventDefault();
      clearErrorMessages();

      var productName = document.querySelector("input[name='productName']").value.trim();
      var category = document.querySelector("select[name='category']").value;
      var description = document.querySelector("textarea[name='description']").value.trim();
      var about = document.querySelector("textarea[name='about']").value.trim();
      var price = document.querySelector("input[name='price']").value.trim();
      var stock = document.querySelector("input[name='stock']").value.trim();
      var offerPrice = document.querySelector("input[name='offerPrice']").value.trim();
      var image = document.querySelector("input[name='images']").value.trim();

      // Regular expressions for validation
      var priceRegex = /^\d+(\.\d{1,2})?$/; // Matches numbers with optional decimal up to 2 places
      var stockRegex = /^\d+$/; // Matches only positive integers
      var offerPriceRegex = /^\d+(\.\d{1,2})?$/; // Matches numbers with optional decimal up to 2 places
      var imageExtensions = /\.(jpg|jpeg|png|gif|webp)$/i; // Matches image file extensions

      var isValid = true;

      // Individual field validations
      if (productName === "") {
        displayErrorMessage("productName", "Please enter product name");
        isValid = false;
      }

      if (category === "") {
        displayErrorMessage("category", "Please select a category");
        isValid = false;
      }

      if (description === "") {
        displayErrorMessage("description", "Please enter product description");
        isValid = false;
      }

      if (about === "") {
        displayErrorMessage("about", "Please enter information about the product");
        isValid = false;
      }

      if (price === "" || !priceRegex.test(price)) {
        displayErrorMessage("price", "Please enter a valid price (e.g., 10 or 10.99)");
        isValid = false;
      }

      if (stock === "" || !stockRegex.test(stock)) {
        displayErrorMessage("stock", "Please enter a valid stock quantity (must be a positive integer)");
        isValid = false;
      }

      if (parseFloat(offerPrice) >= parseFloat(price)) {
        displayErrorMessage("offerPrice", "Please enter a valid offer price (e.g., 10 or 10.99) and it should be less than price");
        isValid = false;
      }

      if (image === "") {
        displayErrorMessage("image", "Please upload product images");
        isValid = false;
      }

      // Add image validation
      if (!validateImages()) {
        return false;
      }

      // If any field is invalid, prevent form submission
      if (!isValid) {
        return false;
      }

      // All fields are valid, allow form submission
      document.getElementById("formaddproduct").submit();
    }

    function displayErrorMessage(fieldName, message) {
      var field = document.querySelector(`[name='${fieldName}']`);
      var errorMessageId = fieldName + "-error";

      // Check if error message already exists
      var existingErrorMessage = document.getElementById(errorMessageId);
      if (existingErrorMessage) {
        existingErrorMessage.textContent = message;
      } else {
        var errorMessage = document.createElement("div");
        errorMessage.id = errorMessageId;
        errorMessage.className = "error-message";
        errorMessage.textContent = message;
        field.parentNode.appendChild(errorMessage);
      }
    }

    function clearErrorMessages() {
      var errorMessages = document.querySelectorAll(".error-message");
      errorMessages.forEach(function(message) {
        message.textContent = "";
      });
    }

    // Field validation on input
    function validateField(fieldName) {
      var field = document.querySelector(`[name='${fieldName}']`);
      var value = field.value.trim();
      var errorMessageId = fieldName + "-error";
      var errorMessage = document.getElementById(errorMessageId);

      switch(fieldName) {
        case 'productName':
          if (value === "") {
            displayErrorMessage(fieldName, "Please enter product name");
          } else {
            clearErrorMessage(errorMessageId);
          }
          break;

        case 'category':
          if (value === "") {
            displayErrorMessage(fieldName, "Please select a category");
          } else {
            clearErrorMessage(errorMessageId);
          }
          break;

        case 'price':
          var priceRegex = /^\d+(\.\d{1,2})?$/;
          if (!priceRegex.test(value)) {
            displayErrorMessage(fieldName, "Please enter a valid price");
          } else {
            clearErrorMessage(errorMessageId);
          }
          break;

        case 'stock':
          var stockRegex = /^\d+$/;
          if (!stockRegex.test(value)) {
            displayErrorMessage(fieldName, "Please enter a valid stock quantity");
          } else {
            clearErrorMessage(errorMessageId);
          }
          break;

        case 'offerPrice':
          var price = document.querySelector("input[name='price']").value.trim();
          if (parseFloat(value) >= parseFloat(price)) {
            displayErrorMessage(fieldName, "Offer price must be less than regular price");
          } else {
            clearErrorMessage(errorMessageId);
          }
          break;
      }
    }

    function clearErrorMessage(errorMessageId) {
      var errorMessage = document.getElementById(errorMessageId);
      if (errorMessage) {
        errorMessage.textContent = "";
      }
    }

    // Add this to your validateForm function
    function validateImages() {
      const fileInput = document.querySelector('input[name="images"]');
      const files = fileInput.files;
      const allowedExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
      const maxFileSize = 5 * 1024 * 1024; // 5MB

      if (files.length === 0) {
        displayErrorMessage("images", "Please select at least one image");
        return false;
      }

      if (files.length > 5) {
        displayErrorMessage("images", "Maximum 5 images allowed");
        return false;
      }

      for (let file of files) {
        const fileName = file.name.toLowerCase();
        const fileExtension = fileName.split('.').pop();

        if (!allowedExtensions.includes(fileExtension)) {
          displayErrorMessage("images", "Only JPG, JPEG, PNG, GIF, and WEBP images are allowed");
          return false;
        }

        if (file.size > maxFileSize) {
          displayErrorMessage("images", `${file.name} is too large. Maximum file size is 5MB`);
          return false;
        }
      }

      return true;
    }
  </script>
</body>
</html>
