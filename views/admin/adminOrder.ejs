<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>Admin</title>
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="robots" content="all,follow">
  <!-- Bootstrap CSS-->
  <link rel="stylesheet" href="vendor/bootstrap/css/bootstrap.min.css">
  <!-- Font Awesome CSS-->
  <link rel="stylesheet" href="vendor/font-awesome/css/font-awesome.min.css">
  <!-- Custom Font Icons CSS-->
  <link rel="stylesheet" href="css/font.css">
  <!-- Google fonts - Muli-->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Muli:300,400,700">
  <!-- theme stylesheet-->
  <link rel="stylesheet" href="css/style.default.css" id="theme-stylesheet">
  <!-- Custom stylesheet - for your changes-->
  <link rel="stylesheet" href="css/custom.css">
  <style>
   .swal2-container {
        z-index: 1060 !important;
    }

    .table img {
      max-width: 100px;
      height: auto;
    }

    .table td {
      vertical-align: middle;
    }
   
  .text-danger {
    color: red;
  }
.modal{
  z-index: 1050 !important;
}

  </style>
</head>

<body>
  <header class="header">
    <nav class="navbar navbar-expand-lg">
      <div class="search-panel">
        <div class="search-inner d-flex align-items-center justify-content-center">
          <div class="close-btn">Close <i class="fa fa-close"></i></div>
          <form id="searchForm" action="#">
            <div class="form-group">
              <input type="search" name="search" placeholder="What are you searching for...">
              <button type="submit" class="submit">Search</button>
            </div>
          </form>
        </div>
      </div>
      <div class="container-fluid d-flex align-items-center justify-content-between">
        <div class="navbar-header">
          <!-- Navbar Header--><a href="/admin" class="navbar-brand">
            <div class="brand-text brand-big visible text-uppercase"><strong class="text-primary">4WATCHES</strong><strong>Admin</strong></div>
            <div class="brand-text brand-sm"><strong class="text-primary">D</strong><strong>A</strong></div>
          </a>
          
          <!-- Languages dropdown    -->
          <div class="list-inline-item dropdown"><a id="languages" rel="nofollow" data-target="#" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="nav-link language dropdown-toggle"><img src="img/flags/16/GB.png" alt="English"><span class="d-none d-sm-inline-block">English</span></a>
            <div aria-labelledby="languages" class="dropdown-menu"><a rel="nofollow" href="#" class="dropdown-item"><img src="img/flags/16/DE.png" alt="English" class="mr-2"><span>German</span></a><a rel="nofollow" href="#" class="dropdown-item"> <img src="img/flags/16/FR.png" alt="English" class="mr-2"><span>French </span></a></div>
          </div>
          <!-- Log out               -->
          <div class="list-inline-item logout"> <a id="logout" href="/admin/logout" class="nav-link">Logout <i class="icon-logout"></i></a></div>
        </div>
      </div>
    </nav>
  </header>
  <div class="d-flex align-items-stretch">
    <!-- Sidebar Navigation-->
    <nav id="sidebar">
      <!-- Sidebar Header-->
      <div class="sidebar-header d-flex align-items-center">
        <div class="avatar"><img src="/images/logo.png" alt="..." class="img-fluid rounded-circle"></div>
        <div class="title">
          <h1 class="h5">Binel</h1>
          <p>Web Designer</p>
        </div>
      </div>
      <!-- Sidebar Navidation Menus--><span class="heading">Main</span>
      <ul class="list-unstyled">
        <li class="active"><a href="/admin/adminHome"> <i class="icon-home"></i>Dashboard</a></li>
        <li><a href="/admin/Product"> <i class="icon-grid"></i>Product</a></li>
        <li><a href="/admin/User"> <i class="fa fa-bar-chart"></i>user</a></li>
        <li><a href="/admin/Category"> <i class="icon-padnote"></i>Category</a></li>
        <li><a href="/admin/order"> <i class="icon-paper-and-pencil"></i>Order</a></li>
        <li><a href="/admin/coupons"> <i class="icon-three-cells"></i>Coupons</a></li>
        <li>
          <a href="/admin/sales">
            <i class="icon-info"></i>Sales Report</a
          >
          </li>
      </ul>
    </nav>
    <!-- Sidebar Navigation end-->
    <div class="page-content">
      <div class="page-header">
        <div class="container-fluid">
          <h2 class="h5 no-margin-bottom">Order Details</h2>
        </div>
      </div>
      <div class="table-responsive" style="padding: 5%;">
        <ul class="pagination justify-content-center">
          <% if (totalPages > 1) { %>
          <% if (currentPage > 1) { %>
          <li class="page-item">
              <a class="page-link" href="/admin/order?page=<%= currentPage - 1 %>" aria-label="Previous">
                  <span aria-hidden="true">&laquo;</span>
                  <span class="sr-only">Previous</span>
              </a>
          </li>
          <% } %>
          <% let startPage = Math.max(1, currentPage - 2); %>
          <% let endPage = Math.min(startPage + 3, totalPages); %>
          <% for(let i = startPage; i <= endPage; i++) { %>
          <li class="page-item <%= currentPage === i ? 'active' : '' %>">
              <a class="page-link" href="/admin/order?page=<%= i %>"><%= i %></a>
          </li>
          <% } %>
          <% if (currentPage < totalPages) { %>
          <li class="page-item">
              <a class="page-link" href="/admin/order?page=<%= currentPage + 1 %>" aria-label="Next">
                  <span aria-hidden="true">&raquo;</span>
                  <span class="sr-only">Next</span>
              </a>
          </li>
          <% } %>
          <% } %>
      </ul>
    </div>
    
        <table class="table">
          <thead>
            <tr>
              <th>OrderId</th>
              <th>Product</th>
              <th>Price</th>
              <th>Payment Method</th>
              <th>Status</th>
              <th>Action</th>
              <th>Request</th>
            </tr>
          </thead>
          <tbody>
            <% for(let i=0; i< order.length ; i++) { %>
              <tr>
                <td>
                  <%= order[i]._id %>
                </td>
    
                  <td>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal_<%= order[i]._id %>"  style="background-color: #bca374; color: white;">
                      Product
                    </button>
                    
                    <!-- Modal for displaying product details -->
                    <div class="modal fade" id="productModal_<%= order[i]._id %>" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
                      <div class="modal-dialog modal-lg" role="document">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="productModalLabel">Product Details</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                          </div>
                          <div class="modal-body">
                            <!-- Table to display product details -->
                            <table class="table">
                              <thead>
                                <tr>
                                  <th>Product ID</th>
                                  <th>Quantity</th>
                                  <th>Price</th>
                                  <th>Status</th>
                                  <th>Action</th>
                                  <th>Request</th>
                                </tr>
                              </thead>
                              <tbody>
                                <% for(let j=0; j < order[i].products.length; j++) { %>
                                  <tr>
                                    <td><%= order[i].products[j].product._id %></td>
                                    <td><%= order[i].products[j].quantity %></td>
                                    <td><%= order[i].products[j].product.price %></td>
                                    <td><%= order[i].products[j].status %></td>
                        <td>
                            <% if (order[i].products[j].status === 'pending') { %>
                              <button class="btn btn-danger cancel-product" data-order-id="<%= order[i]._id %>" data-product-id="<%= order[i].products[j].product._id %>">Cancel Product</button>
                            <% } else if (order[i].products[j].status === 'completed') { %>
                                <button class="btn btn-success" disabled>Delivered</button>
                            <% } else if (order[i].products[j].status === 'returned') { %>
                            <button class="btn btn-secondary" disabled>Product returned</button>
                            <% } else if (order[i].products[j].status === 'cancelled') { %>
                            <button class="btn btn-secondary" disabled>Product Cancelled</button>
                            <% } else if (order[i].products[j].status === 'returnrequest') { %>
                              <button class="btn btn-secondary" disabled>requsted for Return</button>
                              <% } else if (order[i].products[j].status === 'paymentpending') { %>
                                <button class="btn btn-secondary" disabled>payment pending</button>
                                
                            <% } %>
                        </td>
                        <td>
                          <% if (order[i].products[j].status === 'returnrequest') { %>
                            <button class="btn btn-danger return-product" data-order-id="<%= order[i]._id %>" data-product-id="<%= order[i].products[j].product._id %>">Return Product</button>
                        <% } %>
                                  </tr>
                                <% } %>
                              </tbody>
                            </table>
                          </div>
                          <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </td>
                <td>
                  <%= order[i].totalPrice %>
                </td>
                <td>
                  <%= order[i].paymentMethod %>
                </td>
               
                <td>
                  <% if (order[i].status === 'pending') { %>
                    <!-- Show dropdown only if current status is 'pending' -->
                    <select name="status" class="order-status" data-order-id="<%= order[i]._id %>" onchange="changeStatus(this)">
                      <option value="pending" <% if (order[i].status === 'pending') { %>selected<% } %>>Pending</option>
                      <option value="completed">Completed</option>
                    </select>
                  <% } else if(order[i].status === 'completed') { %>
                    <!-- Display current status if not 'pending' -->
                    <span class="text-<%= order[i].status === 'completed' ? 'success' : 'danger' %>">
                      <%= order[i].status.charAt(0).toUpperCase() + order[i].status.slice(1) %>
                    </span>
                  <% } else if(order[i].status === 'returned') {%>
                    <span class="text-<%= order[i].status === 'returned' ? 'warning' : 'danger' %>">
                      <%= order[i].status.charAt(0).toUpperCase() + order[i].status.slice(1) %>
                    </span>
                  <% }  else if(order[i].status === 'cancelled') {%>
                    <span class="text-<%= order[i].status === 'cancelled' ? 'danger' : 'danger' %>">
                      <%= order[i].status.charAt(0).toUpperCase() + order[i].status.slice(1) %>
                    </span>
                    <% }  else if(order[i].status === 'paymentpending') {%>
                      <span class="text-<%= order[i].status === 'paymentpending' ? 'danger' : 'danger' %>">
                        <%= order[i].status.charAt(0).toUpperCase() + order[i].status.slice(1) %>
                      </span>
                  <% } %>
                </td>
                
                <td>
                  <% if(order[i].status == 'pending') { %>
                    <button type="button" class="btn btn-danger cancel-order" data-order-id="<%= order[i]._id %>">Cancel Order</button>
                  <% } else if(order[i].status == 'completed') { %>
                    <span class="text-success">Order Completed</span>
                  <% }else if(order[i].status == 'returned'){ %>
                    <span class="text-warning">Order Returned</span>
                    <% }else if(order[i].status == 'returnrequest'){ %>
                      <span class="text-warning">Requested for Return</span>
                  <% } else  if(order[i].status == 'paymentpending'){ %>
                  <span class="text-danger">Payment pending</span>
                  <% } %>
                </td>
                <td>
                <% if (order[i].status === 'returnrequest') { %>
                  <button class="btn btn-danger return-order" data-order-id="<%= order[i]._id %>">Return Order</button>
              <% } %>
              </td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <footer class="footer">
    <div class="footer__block block no-margin-bottom">
     
    </div>
  </footer>
  </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
       // SweetAlert2 for canceling a product
       document.querySelectorAll('.cancel-product').forEach(button => {
  button.addEventListener('click', async function () {
    const orderId = this.dataset.orderId;
    const productId = this.dataset.productId;

    Swal.fire({
      title: 'Are you sure?',
      text: "You want to cancel this product?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, cancel it!',
      customClass: {
        container: 'swal2-container'
      }
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/orders/cancel-product/${orderId}/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          if (response.ok) {
            Swal.fire(
              'Cancelled!',
              'The product has been cancelled.',
              'success'
            ).then(() => location.reload());
          } else {
            Swal.fire(
              'Error!',
              data.error || 'Failed to cancel the product.',
              'error'
            );
          }
        } catch (error) {
          console.error('Error cancelling product:', error);
          Swal.fire(
            'Error!',
            'An unexpected error occurred.',
            'error'
          );
        }
      }
    });
  });
});
document.querySelectorAll('.return-product').forEach(button => {
  button.addEventListener('click', async function() {
    const orderId = this.dataset.orderId;
    const productId = this.dataset.productId;

    Swal.fire({
      title: 'Are you sure?',
      text: "You want to return this product?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, return it!',
      customClass: {
        container: 'swal2-container'
      }
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/orders/return-product/${orderId}/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          if (response.ok) {
            Swal.fire(
              'Returned!',
              'The product has been returned.',
              'success'
            ).then(() => location.reload());
          } else {
            Swal.fire(
              'Error!',
              data.error || 'Failed to return the product.',
              'error'
            );
          }
        } catch (error) {
          console.error('Error returning product:', error);
          Swal.fire(
            'Error!',
            'An unexpected error occurred.',
            'error'
          );
        }
      }
    });
  });
});

document.querySelectorAll('.return-order').forEach(button => {
  button.addEventListener('click', async function() {
    const orderId = this.dataset.orderId;

    Swal.fire({
      title: 'Are you sure?',
      text: "You want to return this order?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, return it!'
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/orders/return-order/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            Swal.fire(
              'Returned!',
              'The order has been returned.',
              'success'
            ).then(() => location.reload()); // Reload the page to update the status
          } else {
            const data = await response.json();
            Swal.fire(
              'Error!',
              data.error || 'Failed to return the order.',
              'error'
            );
          }
        } catch (error) {
          console.error('Error returning order:', error);
          Swal.fire(
            'Error!',
            'An unexpected error occurred.',
            'error'
          );
        }
      }
    });
  });
});


function changeStatus(element) {
  const orderId = element.dataset.orderId;
  const newStatus = element.value;
  if (newStatus === 'completed') {
    fetch(`/admin/changeOrderStatus`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Include authentication token if needed
      },
      body: JSON.stringify({ orderId: orderId, newStatus: newStatus })
    })
    .then(response => response.json())
    .then(data => {
      if (data.message) {
        Swal.fire({
          title: 'Order Status Updated',
          text: data.message,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          location.reload(); // Reload to see the updated status
        });
      }
    })
    .catch(error => {
      console.error('Error updating order status:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to update the status. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    });
  } else {
    Swal.fire({
      title: 'Invalid Status Change',
      text: 'Invalid status change requested.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
  }
}
    </script>
    


  <script>


  document.querySelectorAll('.cancel-order').forEach(button => {
  button.addEventListener('click', async function() {
    const orderId = this.dataset.orderId;

    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, cancel it!'
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/cancelOrder/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          if (result.isConfirmed) {
            Swal.fire(
              'Cancelled!',
              'The order has been cancelled.',
              'success'
            ).then(() => location.reload()); // Reload the page to update the status
          } else {
            Swal.fire(
              'Error!',
              'Failed to cancel the order.',
              'error'
            );
          }
        } catch (error) {
          console.error('Error cancelling order:', error);
          Swal.fire(
            'Error!',
            'An unexpected error occurred.',
            'error'
          );
        }
      }
    });
  });
});
  </script>

</body>

</html>
