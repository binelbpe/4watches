<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>4WATCHES Admin - Order Management</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- SweetAlert2 -->
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

  <style>
    :root {
      --primary-color: #bca374;
      --primary-dark: #a68b5b;
      --secondary-color: #2c3e50;
      --light-bg: #f8f9fa;
    }

    body {
      background-color: var(--light-bg);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Sidebar Styling */
    #sidebar {
      background: var(--secondary-color);
      min-width: 250px;
      max-width: 250px;
      min-height: 100vh;
      transition: all 0.3s;
    }

    #sidebar .sidebar-header {
      padding: 15px;
      background: var(--primary-color);
      display: flex;
      align-items: center;
    }

    #sidebar ul li a {
      padding: 10px 20px;
      display: block;
      color: #fff;
      text-decoration: none;
      transition: all 0.3s;
    }

    #sidebar ul li a:hover {
      background: var(--primary-color);
    }

    #sidebar ul li.active>a {
      background: var(--primary-color);
    }

    /* Table Container */
    .table-container {
      background: white;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
      padding: 20px;
      margin: 20px;
    }

    /* Table Styling */
    .table thead th {
      background-color: var(--light-bg);
      border-bottom: 2px solid var(--primary-color);
      color: var(--secondary-color);
    }

    .table tbody tr:hover {
      background-color: rgba(188, 163, 116, 0.1);
    }

    /* Modal Styling */
    .modal-content {
      border-radius: 10px;
      overflow: hidden;
    }

    .modal-header {
      background-color: var(--primary-color);
      color: white;
    }

    /* Status Badge Styling */
    .status-badge {
      padding: 0.5em 1em;
      border-radius: 50px;
      font-size: 0.875rem;
      font-weight: 500;
    }

    .status-pending {
      background-color: #ffc107;
      color: #000;
    }

    .status-completed {
      background-color: #28a745;
      color: #fff;
    }

    .status-cancelled {
      background-color: #dc3545;
      color: #fff;
    }

    .status-returned {
      background-color: #17a2b8;
      color: #fff;
    }

    /* Button Styling */
    .btn-primary {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }

    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
    }

    /* Select Styling */
    .order-status {
      padding: 0.375rem 0.75rem;
      border-radius: 0.25rem;
      border: 1px solid #ced4da;
      background-color: #fff;
      color: var(--secondary-color);
    }

    .order-status:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 0.25rem rgba(188, 163, 116, 0.25);
    }

    /* Price Modal Styling */
    .price-breakdown-table th,
    .price-breakdown-table td {
      padding: 0.75rem;
      border-bottom: 1px solid #dee2e6;
    }

    .price-breakdown-table th {
      font-weight: 600;
      background-color: var(--light-bg);
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
      #sidebar {
        margin-left: -250px;
      }

      #sidebar.active {
        margin-left: 0;
      }

      .table-container {
        margin: 10px;
        padding: 15px;
      }

      .table {
        font-size: 0.875rem;
      }

      .modal-dialog {
        margin: 0.5rem;
      }

      .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
      }
    }

    /* Navbar Styling */
    .admin-navbar {
      background-color: var(--primary-color);
      padding: 15px 0;
    }

    .navbar-logo {
      height: 40px;
      width: auto;
      border-radius: 5px;
    }

    .sidebar-logo {
      height: 45px;
      width: auto;
      border-radius: 5px;
      margin-right: 10px;
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar admin-navbar">
    <div class="container-fluid">
      <a class="navbar-brand d-flex align-items-center" href="#">
        <img src="/images/logo.png" alt="4WATCHES Logo" class="navbar-logo me-2">
        <span class="text-white">4WATCHES</span>
      </a>
      <div class="d-flex">
        <a href="/admin/logout" class="btn btn-outline-light">
          <i class="fas fa-sign-out-alt me-2"></i>Logout
        </a>
      </div>
    </div>
  </nav>

  <div class="d-flex">
    <!-- Sidebar -->
    <nav id="sidebar">
      <div class="sidebar-header">
        <img src="/images/logo.png" alt="4WATCHES Logo" class="sidebar-logo">
        <h3 class="text-white mb-0">4WATCHES</h3>
      </div>
      <ul class="list-unstyled components">
        <li>
          <a href="/admin/adminHome">
            <i class="fas fa-home me-2"></i>Dashboard
          </a>
        </li>
        <li>
          <a href="/admin/Product">
            <i class="fas fa-box me-2"></i>Products
          </a>
        </li>
        <li>
          <a href="/admin/User">
            <i class="fas fa-users me-2"></i>Users
          </a>
        </li>
        <li>
          <a href="/admin/Category">
            <i class="fas fa-tags me-2"></i>Categories
          </a>
        </li>
        <li class="active">
          <a href="/admin/order">
            <i class="fas fa-shopping-cart me-2"></i>Orders
          </a>
        </li>
        <li>
          <a href="/admin/coupons">
            <i class="fas fa-ticket-alt me-2"></i>Coupons
          </a>
        </li>
        <li>
          <a href="/admin/sales">
            <i class="fas fa-chart-line me-2"></i>Sales Report
          </a>
        </li>
      </ul>
    </nav>

    <!-- Main Content -->
    <div class="flex-grow-1">
      <div class="container-fluid">
        <div class="table-container">
          <h2 class="mb-4">Order Management</h2>

          <!-- Orders Table -->
          <div class="table-responsive">
            <table class="table align-middle">
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>Details</th>
                  <th>User</th>
                  <th>Price Details</th>
                  <th>Order Date</th>
                  <th>Status</th>
                  <th>Action</th>
                  <th>Request</th>
                </tr>
              </thead>
              <tbody>
                <% for(let i=0; i < order.length; i++) { %>
                  <tr>
                    <td>
                      <%= order[i]._id %>
                    </td>
                    <td>
                      <button class="btn btn-info btn-sm" data-bs-toggle="modal"
                        data-bs-target="#productModal_<%= order[i]._id %>">
                        <i class="fas fa-eye me-1"></i>View Details
                      </button>
                    </td>
                    <td>
                      <button class="btn btn-info btn-sm" data-bs-toggle="modal"
                        data-bs-target="#UserModal_<%= order[i]._id %>">
                        <i class="fas fa-user me-1"></i>User Details
                      </button>
                    </td>
                    <td>
                      <button class="btn btn-info btn-sm" data-bs-toggle="modal"
                        data-bs-target="#priceBreakdownModal-<%= order[i]._id %>">
                        <i class="fas fa-money-bill me-1"></i>View Price
                      </button>
                    </td>
                    <td>
                      <%= new Date(order[i].createdAt).toLocaleDateString() %>
                    </td>
                    <td>
                      <% if (order[i].status==='pending' || order[i].status==='Dispatched' ||
                        order[i].status==='In Transit' ) { %>
                        <select class="form-select form-select-sm order-status" data-order-id="<%= order[i]._id %>"
                          onchange="changeStatus(this)">
                          <option value="pending" <%=order[i].status==='pending' ? 'selected' : '' %>>Pending</option>
                          <option value="Dispatched" <%=order[i].status==='Dispatched' ? 'selected' : '' %>>Dispatched
                          </option>
                          <option value="In Transit" <%=order[i].status==='In Transit' ? 'selected' : '' %>>In Transit
                          </option>
                          <option value="completed">Completed</option>
                        </select>
                        <% } else { %>
                          <span class="badge status-<%= order[i].status.toLowerCase() %>">
                            <%= order[i].status %>
                          </span>
                          <% } %>
                    </td>
                    <td>
                      <% if(order[i].status==='pending' || order[i].status==='Dispatched' ||
                        order[i].status==='In Transit' ) { %>
                        <button class="btn btn-danger btn-sm cancel-order" data-order-id="<%= order[i]._id %>">
                          <i class="fas fa-times me-1"></i>Cancel Order
                        </button>
                        <% } else { %>
                          <span class="badge status-<%= order[i].status.toLowerCase() %>">
                            <%= order[i].status==='completed' ? 'Order Completed' : order[i].status==='returned'
                              ? 'Order Returned' : order[i].status==='cancelled' ? 'Order Cancelled' :
                              order[i].status==='returnrequest' ? 'Return Requested' :
                              order[i].status==='paymentpending' ? 'Payment Pending' : order[i].status %>
                          </span>
                          <% } %>
                    </td>
                    <td>
                      <% if (order[i].status==='returnrequest' ) { %>
                        <button class="btn btn-warning btn-sm return-order" data-order-id="<%= order[i]._id %>">
                          <i class="fas fa-undo me-1"></i>Return Order
                        </button>
                        <% } %>
                    </td>
                  </tr>
                  <% } %>
              </tbody>
            </table>
          </div>

          <!-- Pagination -->
          <div class="d-flex justify-content-center mt-4">
            <ul class="pagination">
              <% if (totalPages> 1) { %>
                <% if (currentPage> 1) { %>
                  <li class="page-item">
                    <a class="page-link" href="/admin/order?page=<%= currentPage - 1 %>" aria-label="Previous">
                      <span aria-hidden="true">&laquo;</span>
                    </a>
                  </li>
                  <% } %>

                    <% let startPage=Math.max(1, currentPage - 2); %>
                      <% let endPage=Math.min(startPage + 3, totalPages); %>

                        <% for(let i=startPage; i <=endPage; i++) { %>
                          <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="/admin/order?page=<%= i %>">
                              <%= i %>
                            </a>
                          </li>
                          <% } %>

                            <% if (currentPage < totalPages) { %>
                              <li class="page-item">
                                <a class="page-link" href="/admin/order?page=<%= currentPage + 1 %>" aria-label="Next">
                                  <span aria-hidden="true">&raquo;</span>
                                </a>
                              </li>
                              <% } %>
                                <% } %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Details Modal -->
  <% for(let i=0; i < order.length; i++) { %>
    <div class="modal fade" id="productModal_<%= order[i]._id %>" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Product Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="table-responsive">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Product Image</th>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Action</th>
                    <th>Request</th>
                  </tr>
                </thead>
                <tbody>
                  <% for(let j=0; j < order[i].products.length; j++) { %>
                    <tr>
                      <td>
                        <% if (order[i].products[j].product && 
                               order[i].products[j].product.image && 
                               Array.isArray(order[i].products[j].product.image) && 
                               order[i].products[j].product.image[0] && 
                               order[i].products[j].product.image[0].path) { %>
                          <img src="<%= order[i].products[j].product.image[0].path %>" 
                               alt="Product Image"
                               style="width: 80px; height: 80px; object-fit: cover;">
                        <% } else { %>
                          <img src="/images/default-product.png" 
                               alt="No Image Available"
                               style="width: 80px; height: 80px; object-fit: cover;">
                        <% } %>
                      </td>
                      <td>
                        <%= order[i].products[j].product.product %>
                      </td>
                      <td>
                        <%= order[i].products[j].quantity %>
                      </td>
                      <td>₹<%= order[i].products[j].product.price %>
                      </td>
                      <td>
                        <span class="badge status-<%= order[i].products[j].status.toLowerCase() %>">
                          <%= order[i].products[j].status %>
                        </span>
                      </td>
                      <td>
                        <% if (order[i].products[j].status==='pending' || order[i].products[j].status==='Dispatched' ||
                          order[i].products[j].status==='In Transit' ) { %>
                          <button class="btn btn-danger btn-sm cancel-product" data-order-id="<%= order[i]._id %>"
                            data-product-id="<%= order[i].products[j].product._id %>">
                            <i class="fas fa-times me-1"></i>Cancel
                          </button>
                          <% } else { %>
                            <span class="badge status-<%= order[i].products[j].status.toLowerCase() %>">
                              <%= order[i].products[j].status==='completed' ? 'Delivered' :
                                order[i].products[j].status==='returned' ? 'Returned' :
                                order[i].products[j].status==='cancelled' ? 'Cancelled' : order[i].products[j].status %>
                            </span>
                            <% } %>
                      </td>
                      <td>
                        <% if (order[i].products[j].status==='returnrequest' ) { %>
                          <button class="btn btn-warning btn-sm return-product" data-order-id="<%= order[i]._id %>"
                            data-product-id="<%= order[i].products[j].product._id %>">
                            <i class="fas fa-undo me-1"></i>Return
                          </button>
                          <% } %>
                      </td>
                    </tr>
                    <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- User Details Modal -->
    <div class="modal fade" id="UserModal_<%= order[i]._id %>" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">User Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="table-responsive">
              <table class="table">
                <tr>
                  <th>Name:</th>
                  <td>
                    <%= order[i].user ? order[i].user.fullname : 'User Not Found' %>
                  </td>
                </tr>
                <tr>
                  <th>Phone:</th>
                  <td>
                    <%= order[i].user ? order[i].user.phone : 'N/A' %>
                  </td>
                </tr>
                <tr>
                  <th>Shipping Address:</th>
                  <td>
                    <% if (order[i].address) { %>
                      <%= order[i].address.address %><br>
                      <%= order[i].address.city %><br>
                      <%= order[i].address.state %><br>
                      PIN: <%= order[i].address.pincode %>
                    <% } else { %>
                      Address Not Available
                    <% } %>
                  </td>
                </tr>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Price Breakdown Modal -->
    <div class="modal fade" id="priceBreakdownModal-<%= order[i]._id %>" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Price Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <% const prices = calculateOrderPrices(order[i]); %>
            <table class="table price-breakdown-table">
              <tr>
                <th>Subtotal:</th>
                <td>₹<%= prices.baseAmount %></td>
              </tr>
              <tr>
                <th>Tax (5%):</th>
                <td>₹<%= prices.tax %></td>
              </tr>
              <tr>
                <th>Shipping Fee:</th>
                <td>₹<%= prices.shipping %></td>
              </tr>
              <% if(parseFloat(prices.discountAmount) > 0) { %>
                <tr>
                  <th>Discount:</th>
                  <td>-₹<%= prices.discountAmount %></td>
                </tr>
              <% } %>
              <% if(order[i].paymentMethod === "pay_by_wallet") { %>
                <tr>
                  <th>Paid from Wallet:</th>
                  <td>₹<%= prices.walletAmount %></td>
                </tr>
              <% } else if(parseFloat(prices.walletAmount) > 0) { %>
                <tr>
                  <th>Wallet Amount Used:</th>
                  <td>₹<%= prices.walletAmount %></td>
                </tr>
              <% } %>
              <% if(parseFloat(prices.reducedAmount) > 0 || parseFloat(prices.returnedAmount) > 0) { %>
                <tr>
                  <th>Refunded Amount:</th>
                  <td>₹<%= (parseFloat(prices.reducedAmount) + parseFloat(prices.returnedAmount)).toFixed(2) %></td>
                </tr>
              <% } %>
              <tr>
                <th>Final Amount:</th>
                <td>₹<%= prices.finalAmount %></td>
              </tr>
              <tr>
                <th>Payment Method:</th>
                <td><%= order[i].paymentMethod %></td>
              </tr>
            </table>
          </div>
        </div>
      </div>
    </div>
    <% } %>

      <!-- Add these scripts before closing body tag -->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script>
        // Change Order Status
        function changeStatus(element) {
          const orderId = element.dataset.orderId;
          const newStatus = element.value;

          if (newStatus) {
            Swal.fire({
              title: 'Are you sure?',
              text: `Do you want to change the order status to ${newStatus}?`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#bca374',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, change it!'
            }).then((result) => {
              if (result.isConfirmed) {
                fetch('/admin/changeOrderStatus', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ orderId: orderId, newStatus: newStatus })
                })
                  .then(response => response.json())
                  .then(data => {
                    if (data.message) {
                      Swal.fire({
                        title: 'Success',
                        text: data.message,
                        icon: 'success',
                        confirmButtonColor: '#bca374'
                      }).then(() => {
                        location.reload();
                      });
                    }
                  })
                  .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                      title: 'Error',
                      text: 'Failed to update the status',
                      icon: 'error',
                      confirmButtonColor: '#d33'
                    });
                  });
              } else {
                // Reset select to previous value if cancelled
                element.value = element.getAttribute('data-original-value');
              }
            });
          }
        }

        // Cancel Order
        document.querySelectorAll('.cancel-order').forEach(button => {
          button.addEventListener('click', async function () {
            const orderId = this.dataset.orderId;

            const result = await Swal.fire({
              title: 'Are you sure?',
              text: "You want to cancel this order?",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#3085d6',
              confirmButtonText: 'Yes, cancel it!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/cancelOrder/${orderId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (response.ok) {
                  Swal.fire({
                    title: 'Cancelled!',
                    text: 'The order has been cancelled.',
                    icon: 'success',
                    confirmButtonColor: '#bca374'
                  }).then(() => location.reload());
                } else {
                  throw new Error('Failed to cancel order');
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error',
                  text: 'Failed to cancel the order',
                  icon: 'error',
                  confirmButtonColor: '#d33'
                });
              }
            }
          });
        });

        // Cancel Product
        document.querySelectorAll('.cancel-product').forEach(button => {
          button.addEventListener('click', async function () {
            const orderId = this.dataset.orderId;
            const productId = this.dataset.productId;

            const result = await Swal.fire({
              title: 'Are you sure?',
              text: "You want to cancel this product?",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#d33',
              cancelButtonColor: '#3085d6',
              confirmButtonText: 'Yes, cancel it!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/orders/cancel-product/${orderId}/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (response.ok) {
                  Swal.fire({
                    title: 'Cancelled!',
                    text: 'The product has been cancelled.',
                    icon: 'success',
                    confirmButtonColor: '#bca374'
                  }).then(() => location.reload());
                } else {
                  throw new Error('Failed to cancel product');
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error',
                  text: 'Failed to cancel the product',
                  icon: 'error',
                  confirmButtonColor: '#d33'
                });
              }
            }
          });
        });

        // Return Order
        document.querySelectorAll('.return-order').forEach(button => {
          button.addEventListener('click', async function () {
            const orderId = this.dataset.orderId;

            const result = await Swal.fire({
              title: 'Are you sure?',
              text: "You want to return this order?",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#bca374',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, return it!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/orders/return-order/${orderId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (response.ok) {
                  Swal.fire({
                    title: 'Returned!',
                    text: 'The order has been returned.',
                    icon: 'success',
                    confirmButtonColor: '#bca374'
                  }).then(() => location.reload());
                } else {
                  throw new Error('Failed to return order');
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error',
                  text: 'Failed to return the order',
                  icon: 'error',
                  confirmButtonColor: '#d33'
                });
              }
            }
          });
        });

        // Return Product
        document.querySelectorAll('.return-product').forEach(button => {
          button.addEventListener('click', async function () {
            const orderId = this.dataset.orderId;
            const productId = this.dataset.productId;

            const result = await Swal.fire({
              title: 'Are you sure?',
              text: "You want to return this product?",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#bca374',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, return it!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/orders/return-product/${orderId}/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (response.ok) {
                  Swal.fire({
                    title: 'Returned!',
                    text: 'The product has been returned.',
                    icon: 'success',
                    confirmButtonColor: '#bca374'
                  }).then(() => location.reload());
                } else {
                  throw new Error('Failed to return product');
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error',
                  text: 'Failed to return the product',
                  icon: 'error',
                  confirmButtonColor: '#d33'
                });
              }
            }
          });
        });

        // Mobile sidebar toggle
        document.addEventListener('DOMContentLoaded', function () {
          const sidebarToggle = document.createElement('button');
          sidebarToggle.classList.add('btn', 'btn-primary', 'd-md-none', 'position-fixed');
          sidebarToggle.style.cssText = 'top: 10px; left: 10px; z-index: 1000;';
          sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
          document.body.appendChild(sidebarToggle);

          sidebarToggle.addEventListener('click', function () {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('active');
          });
        });
      </script>
</body>

</html>