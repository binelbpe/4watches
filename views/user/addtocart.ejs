<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Cart - Gamers Paradise</title>

  <!-- Bootstrap CSS -->
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />

  <!-- <link rel="stylesheet" href="/css/cart.css"> -->

  <script src="https://cdn.tailwindcss.com"></script>

  <style>
    :root {
      --gold-primary: #D4AF37;
      --gold-secondary: #FFD700;
      --gold-dark: #B8860B;
      --gold-light: #FFF8DC;
    }

    .gold-gradient {
      background: linear-gradient(135deg, #D4AF37, #FFD700);
    }

    .cart-item-shadow {
      box-shadow: 0 4px 6px -1px rgba(212, 175, 55, 0.1), 0 2px 4px -1px rgba(212, 175, 55, 0.06);
    }

    .quantity-btn {
      transition: all 0.3s ease;
    }

    .quantity-btn:hover {
      background-color: var(--gold-dark);
      color: white;
    }

    .remove-btn {
      transition: all 0.3s ease;
    }

    .remove-btn:hover {
      background-color: #EF4444;
      color: white;
    }

    .checkout-btn {
      transition: all 0.3s ease;
    }

    .checkout-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(212, 175, 55, 0.4);
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <%- include('../layouts/header.ejs') %>

  <body>

    <main class="container mx-auto px-4 py-8">
      <h1 class="text-4xl font-bold mb-8 text-center text-gray-800">Your Shopping Cart</h1>

      <div class="bg-white rounded-lg shadow-lg p-6">
        <div class="grid grid-cols-7 gap-4 mb-4 text-sm font-semibold text-gray-600 border-b pb-4">
          <div class="col-span-2">Product</div>
          <div>Stock Status</div>
          <div>Price</div>
          <div>Quantity</div>
          <div>Total</div>
          <div>Action</div>
        </div>

        <% if (products.length === 0) { %>
        <div class="text-center py-8">
          <i class="fas fa-shopping-cart text-6xl text-gray-300 mb-4"></i>
          <p class="text-gray-500 text-lg">Your cart is empty</p>
          <a href="/" class="inline-block mt-4 px-6 py-2 bg-[#D4AF37] text-white rounded-lg hover:bg-[#B8860B] transition-colors">
            Continue Shopping
          </a>
        </div>
        <% } else { %>
        <% products.forEach(item => { %>
        <% if (item.product && item.product.status) { %>
        <div class="grid grid-cols-7 gap-4 items-center py-4 border-b cart-item-shadow hover:bg-gray-50 transition-colors" data-stock="<%= item.product.stock %>" data-product-id="<%= item.product._id %>">
          <div class="col-span-2 flex items-center space-x-4">
            <img class="w-20 h-20 object-cover rounded-lg" src="<%= item.product.image[0].path %>" alt="<%= item.product.product %>" />
            <div>
              <p class="font-medium text-gray-800"><%= item.product.product %></p>
              <div class="product-id hidden"><%= item.product._id %></div>
            </div>
          </div>

          <div class="product-stock">
            <span class="stock-status px-3 py-1 rounded-full text-sm"></span>
          </div>

          <div class="product-price font-medium">
            <% if (item.product.offerPrice && item.product.offerPrice > 0 && item.product.offerPrice < item.product.price) { %>
              <span class="block text-gray-400 line-through text-sm original-price">₹<%= item.product.price.toFixed(2) %></span>
              <span class="text-[#D4AF37] effective-price">₹<%= item.product.offerPrice.toFixed(2) %></span>
            <% } else { %>
              <span class="effective-price">₹<%= item.product.price.toFixed(2) %></span>
            <% } %>
          </div>

          <div class="product-quantity flex items-center space-x-2">
            <button class="quantity-btn decrease w-8 h-8 rounded-full border border-[#D4AF37] text-[#D4AF37] flex items-center justify-center">-</button>
            <input type="number" value="<%= item.quantity %>" min="1" class="w-12 text-center border-none" readonly />
            <button class="quantity-btn increase w-8 h-8 rounded-full border border-[#D4AF37] text-[#D4AF37] flex items-center justify-center">+</button>
          </div>

          <div class="product-line-price font-medium text-[#D4AF37]">
            <% const effectivePrice = (item.product.offerPrice && item.product.offerPrice > 0 && item.product.offerPrice < item.product.price) 
                ? item.product.offerPrice 
                : item.product.price %>
            ₹<%= (effectivePrice * item.quantity).toFixed(2) %>
          </div>

          <div>
            <button class="remove-btn px-4 py-2 rounded-lg border border-red-500 text-red-500 hover:bg-red-500 hover:text-white transition-colors" 
                    onclick="removeFromCart('<%= item.product._id %>')" 
                    type="button">
              <i class="fas fa-trash-alt"></i>
            </button>
          </div>
        </div>
        <% } %>
        <% }) %>

        <div class="mt-8 grid grid-cols-2 gap-8">
          <div class="space-y-4">
            <h2 class="text-xl font-semibold text-gray-800">Order Summary</h2>
            <div class="bg-gray-50 p-6 rounded-lg">
              <div class="space-y-3">
                <div class="flex justify-between">
                  <span class="text-gray-600">Subtotal</span>
                  <span class="font-medium" id="cart-subtotal">₹0.00</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Tax (5%)</span>
                  <span class="font-medium" id="cart-tax">₹0.00</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Shipping</span>
                  <span class="font-medium" id="cart-shipping">₹0.00</span>
                </div>
                <div class="border-t pt-3 mt-3">
                  <div class="flex justify-between">
                    <span class="text-lg font-semibold">Total</span>
                    <span class="text-lg font-semibold text-[#D4AF37]" id="cart-total">₹0.00</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="flex flex-col justify-end">
            <form id="checkoutForm" action="/checkout" method="POST">
              <input type="hidden" name="cartData" id="cartData">
              <input type="hidden" name="totalPrice" id="totalPrice">
              <input type="hidden" name="shipping" id="shipping">
              <input type="hidden" name="tax" id="tax">
              <button type="submit" class="checkout-btn w-full px-6 py-3 bg-[#D4AF37] text-white rounded-lg font-semibold hover:bg-[#B8860B] transition-all">
                Proceed to Checkout
              </button>
            </form>
            <a href="/" class="text-center mt-4 text-gray-600 hover:text-[#D4AF37] transition-colors">
              Continue Shopping
            </a>
          </div>
        </div>
        <% } %>
      </div>
    </main>

    <%- include('../layouts/footer.ejs') %>
    <!-- Bootstrap JS and jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- JavaScript Function to Remove Product from Cart -->
    <script>
      /* Set rates + misc */
      var taxRate = 0.05;
      var shippingRate = 45;
      var fadeTime = 200;

      /* Assign actions */
      $(".product-quantity input").change(function() {
        updateQuantity(this);
      });

      $(".product-removal button").click(function() {
        removeItem(this);
      });

      // Update totals when page is loaded
      $(document).ready(function() {
        recalculateCart();
      });

      /* Recalculate cart */
      function recalculateCart() {
        var subtotal = 0;

        /* Sum up row totals */
        $(".grid.grid-cols-7.gap-4.items-center").each(function() {
          var stock = parseInt($(this).data("stock"));
          if (stock > 0) {
            // Get the effective price based on offer price logic
            let effectivePrice;
            const originalPrice = parseFloat($(this).find(".original-price").text().replace('₹', '')) || 0;
            const offerPriceElement = $(this).find(".effective-price");
            const offerPrice = parseFloat(offerPriceElement.text().replace('₹', ''));
            
            // Use offer price if it exists and is valid
            effectivePrice = (offerPrice && offerPrice > 0 && offerPrice < originalPrice) ? offerPrice : originalPrice || offerPrice;
            
            var quantity = parseInt($(this).find(".product-quantity input").val());
            var linePrice = effectivePrice * quantity;
            subtotal += linePrice;
          }
        });

        /* Calculate totals */
        var tax = subtotal * taxRate;
        var shipping = subtotal > 0 ? shippingRate : 0;
        var total = subtotal + tax + shipping;

        /* Update totals display */
        $("#cart-subtotal").html('₹' + subtotal.toFixed(2));
        $("#cart-tax").html('₹' + tax.toFixed(2));
        $("#cart-shipping").html('₹' + shipping.toFixed(2));
        $("#cart-total").html('₹' + total.toFixed(2));

        // Update hidden fields for checkout
        $("#totalPrice").val(total);
        $("#shipping").val(shipping);
        $("#tax").val(tax);

        if (total == 0) {
          $(".checkout-btn").fadeOut(fadeTime);
        } else {
          $(".checkout-btn").fadeIn(fadeTime);
        }
      }

      /* Remove item from cart */
      function removeItem(removeButton) {
        /* Remove row from DOM and recalc cart total */
        var productRow = $(removeButton).parent().parent();
        productRow.slideUp(fadeTime, function() {
          productRow.remove();
          recalculateCart();
        });
      }


      function removeFromCart(productId) {
        Swal.fire({
          title: 'Are you sure?',
          text: "Remove this item from cart?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#D4AF37',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
          if (result.isConfirmed) {
            // Send the DELETE request to the correct route
            fetch(`/remove-from-cart/${productId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
                // Add CSRF token if you're using it
                // 'CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
              },
              credentials: 'same-origin' // Include cookies in the request
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              // Remove the product row from the DOM
              const productRow = document.querySelector(`.grid.grid-cols-7[data-product-id="${productId}"]`);
              if (productRow) {
                productRow.remove();
                recalculateCart();
                
                Toast.fire({
                  icon: 'success',
                  title: 'Product removed from cart'
                });

                // Check if cart is empty
                const remainingProducts = document.querySelectorAll('.grid.grid-cols-7.gap-4.items-center');
                if (remainingProducts.length <= 1) { // <= 1 because the header row is also counted
                  window.location.reload(); // Reload to show empty cart message
                }
              }
            })
            .catch((error) => {
              console.error("Error removing product from cart:", error);
              Toast.fire({
                icon: 'error',
                title: 'Failed to remove product from cart'
              });
            });
          }
        });
      }

      document.addEventListener("DOMContentLoaded", function() {
        const productCards = document.querySelectorAll(".product"); // Select all product cards

        productCards.forEach((card) => {
          const stockStatus = card.querySelector(".stock-status"); // Find the stock status element within the card

          const stock = parseInt(card.dataset.stock); // Get the stock quantity from the data attribute

          if (stock <= 0) {
            stockStatus.textContent = "Out of Stock";
            stockStatus.style.color = "red";
            const addToCartButton = card.querySelector(".product");
            addToCartButton.disabled = true; // Disable add to cart button
            addToCartButton.style.display = "none";
          } else if (stock < 5) {
            stockStatus.textContent = `Limited Stock (${stock} left)`;
            stockStatus.style.color = "orange";
          } else {
            stockStatus.textContent = "In Stock";
            stockStatus.style.color = "green";
          }
        });
      });


      document.addEventListener("DOMContentLoaded", function() {
        const checkoutForm = document.getElementById("checkoutForm");
        if (!checkoutForm) return;

        checkoutForm.addEventListener("submit", async function(event) {
          event.preventDefault();
          console.log("Form submitted");

          // Check for out-of-stock products
          const outOfStockProducts = document.querySelectorAll(".grid.grid-cols-7[data-stock='0']");
          if (outOfStockProducts.length > 0) {
            Swal.fire({
              title: 'Cannot Proceed',
              text: 'Some products are out of stock.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
            return;
          }

          const products = [];

          document.querySelectorAll(".grid.grid-cols-7.gap-4.items-center").forEach(row => {
            if (!row.classList.contains('border-b')) return;

            const productId = row.querySelector(".product-id").textContent.trim();
            const productName = row.querySelector(".font-medium.text-gray-800").textContent;
            const productQuantity = parseInt(row.querySelector(".product-quantity input").value);
            const productPrice = parseFloat(row.querySelector(".product-price").textContent.replace('₹', ''));
            const productTotalPrice = parseFloat(row.querySelector(".product-line-price").textContent.replace('₹', ''));

            products.push({
              _id: productId,
              name: productName,
              quantity: productQuantity,
              price: productPrice,
              totalPrice: productTotalPrice
            });
          });

          const totalPrice = parseFloat(document.getElementById("cart-total").textContent.replace('₹', ''));
          const tax = totalPrice * 0.05;
          const shipping = 45;

          document.getElementById("cartData").value = JSON.stringify(products);
          document.getElementById("totalPrice").value = totalPrice;
          document.getElementById("shipping").value = shipping;
          document.getElementById("tax").value = tax;

          this.submit();
        });
      });
    </script>

    <script>
      // Update quantity function

      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        background: '#FFF8DC',
        color: '#B8860B'
      });

      // Update stock status display
      document.addEventListener("DOMContentLoaded", function() {
        const productCards = document.querySelectorAll(".product");

        productCards.forEach((card) => {
          const stockStatus = card.querySelector(".stock-status");
          const stock = parseInt(card.dataset.stock);

          if (stock <= 0) {
            stockStatus.textContent = "Out of Stock";
            stockStatus.classList.add("bg-red-100", "text-red-800");
          } else if (stock < 5) {
            stockStatus.textContent = `Limited Stock (${stock})`;
            stockStatus.classList.add("bg-orange-100", "text-orange-800");
          } else {
            stockStatus.textContent = "In Stock";
            stockStatus.classList.add("bg-green-100", "text-green-800");
          }
        });
      });


      function updateQuantity(quantityInput) {
        const productRow = $(quantityInput).closest(".grid.grid-cols-7");
        
        // Get the effective price based on offer price logic
        let effectivePrice;
        const originalPrice = parseFloat(productRow.find(".original-price").text().replace('₹', '')) || 0;
        const offerPriceElement = productRow.find(".effective-price");
        const offerPrice = parseFloat(offerPriceElement.text().replace('₹', ''));
        
        // Use offer price if it exists and is valid
        effectivePrice = (offerPrice && offerPrice > 0 && offerPrice < originalPrice) ? offerPrice : originalPrice || offerPrice;
        
        const quantity = parseInt($(quantityInput).val());
        const linePrice = effectivePrice * quantity;

        // Update the line price display
        productRow.find(".product-line-price").fadeOut(fadeTime, function() {
          $(this).html('₹' + linePrice.toFixed(2));
          recalculateCart();
          $(this).fadeIn(fadeTime);
        });

        // Update backend
        const productId = productRow.find(".product-id").text().trim();
        fetch(`/update-cart-quantity/${productId}`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            quantity: quantity,
            price: effectivePrice // Send the effective price to backend
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log("Quantity updated successfully:", data);
          // Refresh the cart totals
          recalculateCart();
        })
        .catch(error => console.error("Error updating quantity:", error));
      }

      // Quantity increment/decrement handlers
      document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".grid.grid-cols-7.gap-4.items-center").forEach((card) => {
          const decreaseBtn = card.querySelector(".quantity-btn.decrease");
          const increaseBtn = card.querySelector(".quantity-btn.increase");
          const quantityInput = card.querySelector(".product-quantity input");
          const stock = parseInt(card.dataset.stock);

          if (decreaseBtn && increaseBtn && quantityInput) {
            decreaseBtn.addEventListener("click", function() {
              let quantity = parseInt(quantityInput.value);
              if (quantity > 1) {
                quantity -= 1;
                quantityInput.value = quantity;
                updateQuantity(quantityInput);
                if (quantity === 1) {
                  Toast.fire({
                    icon: 'info',
                    title: 'Minimum quantity reached'
                  });
                }
              }
            });

            increaseBtn.addEventListener("click", function() {
              let quantity = parseInt(quantityInput.value);
              if (quantity < stock && quantity < 5) {
                quantity += 1;
                quantityInput.value = quantity;
                updateQuantity(quantityInput);
                if (quantity === 5) {
                  Toast.fire({
                    icon: 'warning',
                    title: 'Maximum quantity reached'
                  });
                } else if (quantity === stock) {
                  Toast.fire({
                    icon: 'warning',
                    title: `Maximum available stock (${stock}) reached`
                  });
                }
              }
            });
          }
        });

        // Initial calculation of cart totals
        recalculateCart();
      });
    </script>

  </body>

</html>