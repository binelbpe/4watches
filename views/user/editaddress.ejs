<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>4Watch Store - Edit Address</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css" />
    <style>
      .golden-gradient {
        background: linear-gradient(135deg, #bf953f, #fcf6ba, #b38728, #fbf5b7);
      }
      .hover-golden:hover {
        background: linear-gradient(135deg, #bf953f, #fcf6ba);
      }
      .border-red-500 {
        border-color: #ef4444;
      }
      .border-green-500 {
        border-color: #22c55e;
      }
      .text-red-500 {
        color: #ef4444;
      }
      .text-red-500 {
        animation: slideDown 0.3s ease-out;
      }
      @keyframes slideDown {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>
  </head>

  <body class="bg-gray-50">
    <%- include('../layouts/header.ejs', { fullName: fullName }) %>

    <main class="container mx-auto px-4 py-8 max-w-2xl">
      <div class="bg-white rounded-xl shadow-lg p-6 border border-amber-200">
        <div class="mb-6 text-center">
          <h1 class="text-2xl font-bold text-gray-800">Edit Address</h1>
        </div>

        <form id="addressForm" action="/edit-address/<%= address._id %>" method="POST" onsubmit="return validateForm(event)">
          <div class="space-y-4">
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="address">Address</label>
              <input type="text" 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-400" 
                     id="address" name="address" value="<%= address.address %>">
              <div id="addressError" class="text-red-500 text-sm mt-1 hidden"></div>
            </div>

            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="addressline2">Address Line 2</label>
              <input type="text" 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-400" 
                     id="addressline2" name="addressline2" value="<%= address.addressline2 %>">
              <div id="address2Error" class="text-red-500 text-sm mt-1 hidden"></div>
            </div>

            <div class="grid grid-cols-2 gap-4">
              <div>
                <label class="block text-gray-700 text-sm font-bold mb-2" for="city">City</label>
                <input type="text" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-400" 
                       id="city" name="city" value="<%= address.city %>">
                <div id="cityError" class="text-red-500 text-sm mt-1 hidden"></div>
              </div>

              <div>
                <label class="block text-gray-700 text-sm font-bold mb-2" for="state">State</label>
                <input type="text" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-400" 
                       id="state" name="state" value="<%= address.state %>">
                <div id="stateError" class="text-red-500 text-sm mt-1 hidden"></div>
              </div>
            </div>

            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="pincode">Pincode</label>
              <input type="text" 
                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-400" 
                     id="pincode" name="pincode" value="<%= address.pincode %>">
              <div id="pincodeError" class="text-red-500 text-sm mt-1 hidden"></div>
            </div>

            <div class="flex justify-between items-center pt-4">
              <a href="/view-addresses" class="text-amber-600 hover:text-amber-700">
                <i class="fas fa-arrow-left mr-2"></i>Back to Addresses
              </a>
              <button type="submit" class="bg-amber-500 text-white px-6 py-2 rounded-md hover:bg-amber-600 transition-colors">
                Save Changes
              </button>
            </div>
          </div>
        </form>
      </div>
    </main>
 

    <script>
      // Initialize validation on page load
      document.addEventListener('DOMContentLoaded', function() {
        // Add input event listeners to all fields
        initializeValidation();
      });

      function initializeValidation() {
        const fields = getValidationRules();
        
        // Add input listeners to each field
        Object.keys(fields).forEach(fieldName => {
          const field = document.getElementById(fieldName);
          field.addEventListener('input', function() {
            validateField(fieldName, this.value);
          });
          
          // Add blur listener to show errors when user leaves a field
          field.addEventListener('blur', function() {
            validateField(fieldName, this.value, true);
          });
        });
      }

      function getValidationRules() {
        return {
          address: { 
            regex: /^[a-zA-Z0-9\s,.'/-]{3,50}$/, 
            message: "Address should be 3-50 characters and can contain letters, numbers, spaces and , . ' / -",
            required: true
          },
          addressline2: { 
            regex: /^[a-zA-Z0-9\s,.'/-]{0,50}$/, 
            message: "Address line 2 can contain letters, numbers, spaces and , . ' / - (max 50 characters)",
            required: false
          },
          city: { 
            regex: /^[a-zA-Z\s]{3,30}$/, 
            message: "City should contain 3-30 letters only",
            required: true
          },
          state: { 
            regex: /^[a-zA-Z\s]{3,30}$/, 
            message: "State should contain 3-30 letters only",
            required: true
          },
          pincode: { 
            regex: /^[1-9][0-9]{5}$/, 
            message: "Please enter a valid 6-digit pincode starting with non-zero digit",
            required: true
          }
        };
      }

      function validateField(fieldName, value, showError = false) {
        const fields = getValidationRules();
        const field = document.getElementById(fieldName);
        const error = document.getElementById(`${fieldName}Error`);
        value = value.trim();

        // Clear previous styling
        field.classList.remove("border-red-500", "border-green-500");
        error.classList.add("hidden");

        // Skip validation for optional addressline2 if empty
        if (fieldName === 'addressline2' && !value) {
          return true;
        }

        let isValid = true;
        let errorMessage = '';

        // Check if required field is empty
        if (fields[fieldName].required && !value) {
          isValid = false;
          errorMessage = `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required`;
        }
        // Check regex pattern
        else if (value && !fields[fieldName].regex.test(value)) {
          isValid = false;
          errorMessage = fields[fieldName].message;
        }

        // Apply styling based on validation
        if (!isValid && showError) {
          field.classList.add("border-red-500");
          error.textContent = errorMessage;
          error.classList.remove("hidden");
        } else if (isValid && value) {
          field.classList.add("border-green-500");
        }

        return isValid;
      }

      function validateForm(event) {
        event.preventDefault();
        const fields = getValidationRules();
        let isValid = true;

        // Validate all fields
        Object.keys(fields).forEach(fieldName => {
          const field = document.getElementById(fieldName);
          if (!validateField(fieldName, field.value, true)) {
            isValid = false;
          }
        });

        // Show success message if all fields are valid
        if (isValid) {
          // Optional: Show success message before submitting
          const successMessage = document.createElement('div');
          successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded shadow-lg';
          successMessage.textContent = 'Address updated successfully!';
          document.body.appendChild(successMessage);

          // Submit form after brief delay to show success message
          setTimeout(() => {
            document.getElementById("addressForm").submit();
          }, 1000);
        } else {
          // Scroll to the first error
          const firstError = document.querySelector('.border-red-500');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
      }
    </script>
  </body>
</html>
