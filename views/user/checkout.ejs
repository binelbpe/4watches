<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Checkout</title>
  <link rel="stylesheet" href="/css/style.css" />
  <!-- Bootstrap CSS -->
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css" />
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">

  <style>
    body {
      background-color: #f8f9fa;
    }

    .navbar {
      box-shadow: 0 2px 4px rgba(0, 0, 0, .1);
    }

    .checkout-container {
      background-color: #ffffff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, .1);
      padding: 30px;
      margin-top: 30px;
    }

    .section-title {
      border-bottom: 2px solid #007bff;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }

    .btn-primary {
      background-color: #007bff;
      border-color: #007bff;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }

    #cashOnDeliveryError {
      display: none;
      margin-top: 10px;
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <%- include('../layouts/header.ejs') %>

    <div class="container checkout-container">
      <h1 class="text-center mb-4">Checkout</h1>

      <div class="row">
        <div class="col-md-6">
          <h2 class="section-title">Shipping Address</h2>
          <% if (addresses.length> 0) { %>
            <form action="/checkout/place-order" method="POST">
              <input type="hidden" name="totalPrice" id="totalPriceInput" value="<%= totalPrice %>" />
              <input type="hidden" name="discountedAmount" id="discountedAmountInput" value="<%= discountedAmount %>" />
              <select name="address" id="address" class="form-control mb-3" onchange="updateAddressStatus(this)">
                <% addresses.forEach(address=> { %>
                  <option value="<%= address._id %>" data-status="<%= address.status %>">
                    <%= address.address %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                  </option>
                  <% }); %>
              </select>
              <button type="button" onclick="location.href='/orderviewaddresses'" class="btn btn-secondary">
                View Addresses
              </button>
            </form>
            <% } else { %>
              <p>No shipping addresses found. Please add a shipping address <a href="/add-addressorder">here</a>.</p>
              <div id="addressError" class="alert alert-danger">Please add a shipping address before proceeding to
                checkout.</div>
              <button type="button" onclick="location.href='/orderviewaddresses'" class="btn btn-secondary">
                View Addresses
              </button>
              <% } %>
        </div>

        <div class="col-md-6">
          <h2 class="section-title">Coupon Code</h2>
          <div class="input-group mb-3">
            <input type="text" name="coupon" id="coupon" class="form-control" placeholder="Enter coupon code" />
            <div class="input-group-append">
              <button class="btn btn-primary" id="applyCouponBtn">Apply Coupon</button>
              <button class="btn btn-danger" id="clearCouponBtn" style="display: none;">Clear Coupon</button>
            </div>
          </div>
          <p id="couponMessage" class="text-danger" style="display: none">Invalid coupon code</p>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-6">
          <h2 class="section-title">Order Summary</h2>
          <input type="hidden" id="originalTotalPrice" value="<%= totalPrice %>">
          
          <div class="summary-item">
            <span>Wallet Balance:</span>
            <span id="walletBalance"><%= walletBalance.toFixed(0) %></span>
          </div>
          <div class="summary-item">
            <span>Subtotal:</span>
            <span id="subtotal"><%= ((totalPrice - 45) / 1.05).toFixed(2) %></span>
          </div>
          <div class="summary-item">
            <span>Discount:</span>
            <span id="discountedAmount">0.00</span>
          </div>
          <div class="summary-item">
            <span>Tax (5%):</span>
            <span id="tax"><%= (((totalPrice - 45) / 1.05) * 0.05).toFixed(2) %></span>
          </div>
          <div class="summary-item">
            <span>Shipping:</span>
            <span id="shipping">45.00</span>
          </div>
          <div class="summary-item font-weight-bold">
            <span>Total Price:</span>
            <span id="totalPrice"><%= totalPrice %></span>
          </div>
        </div>

        <div class="col-md-6">
          <h2 class="section-title">Payment Method</h2>
          <select name="paymentMethod" id="paymentMethod" class="form-control mb-3">
            <option value="">Select payment method</option>
            <option value="pay_on_online">Online Payment</option>
            <option value="cash_on_delivery">Cash on Delivery</option>
            <option value="pay_by_wallet" hidden>Use wallet</option>
          </select>
          <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" id="useWalletCheckbox">
            <label id="useWallet" class="form-check-label" for="useWalletCheckbox">Use wallet balance</label>
          </div>
          <div id="cashOnDeliveryError" class="alert alert-warning">Cash on Delivery is not available for orders above
            â‚¹1000.</div>
        </div>
      </div>

      <div class="text-center mt-4">
        <button id="checkoutButton" class="btn btn-primary btn-lg">Place Order</button>
      </div>
      <div id="addressError" style="color: red; display: none;">Please add a shipping address before proceeding to
        checkout.</div>
    </div>
    </form>

    <!-- Bootstrap JS -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
    <script>
      function updateAddressStatus(selectElement) {
        const selectedAddressId = selectElement.value;
        const selectedAddressStatus = selectElement.options[selectElement.selectedIndex].getAttribute('data-status');

        // AJAX request to update address status
        fetch(`/update-address-status/${selectedAddressId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: selectedAddressStatus }),
        })
          .then(response => {
            if (response.ok) {
              console.log('Address status updated successfully.');
              // Optionally, you can update UI or perform any other actions upon successful update
            } else {
              console.error('Failed to update address status.');
            }
          })
          .catch(error => {
            console.error('Error updating address status:', error);
          });
      }

      document.addEventListener("DOMContentLoaded", function () {
        const checkoutButton = document.getElementById("useWallet");
        const walletLabel = document.getElementById('useWallet')
        const walletBalance = parseFloat(document.getElementById("walletBalance").textContent);

        const wallertUse = document.getElementById("useWallet");
        if (walletBalance === 0) {
          checkoutButton.style.display = "none";
          wallertUse.innerHTML = "";
        }
      });
      document.addEventListener('DOMContentLoaded', function () {
        toggleCashOnDeliveryOption();
        const cashOnDeliveryError = document.getElementById('cashOnDeliveryError');
        cashOnDeliveryError.style.display = 'none';
      });

      document.addEventListener("DOMContentLoaded", function () {
        toggleCashOnDeliveryOption();
      });
      function toggleCashOnDeliveryOption() {
        const cashOnDeliveryOption = paymentMethodSelect.querySelector('option[value="cash_on_delivery"]');
        const cashOnDeliveryError = document.getElementById('cashOnDeliveryError');
        const discountedAmount = parseFloat(document.getElementById("discountedAmount").textContent);
        const useWallet = document.getElementById("useWalletCheckbox").checked;

        if (useWallet && currentWalletBalance !== 0 && discountedAmount > currentWalletBalance) {
          cashOnDeliveryOption.disabled = true;

        } else {
          cashOnDeliveryOption.disabled = shouldHideCashOnDelivery();

        }
      }
      const useWalletCheckbox = document.getElementById('useWalletCheckbox');
      const totalPriceElement = document.getElementById('totalPrice');
      const walletBalanceElement = document.getElementById('walletBalance');
      const paymentMethodSelect = document.getElementById('paymentMethod');
      const checkoutButton = document.getElementById('checkoutButton');
      const initialWalletBalance = '<%= walletBalance %>';
      let currentWalletBalance = parseFloat(initialWalletBalance);



      function shouldHideCashOnDelivery() {
        const discountedAmount = parseFloat(document.getElementById("discountedAmount").textContent);
        const useWallet = document.getElementById("useWalletCheckbox").checked;
        const totalPrice = parseFloat(document.getElementById("totalPrice").textContent);
        const cashOnDeliveryThreshold = 1000;

        if (useWallet) {
          if (totalPrice <= currentWalletBalance) {
            // If wallet balance is enough to cover the total price, hide all payment methods except "Use wallet"
            return true;
          } else if (currentWalletBalance !== 0 && discountedAmount <= currentWalletBalance) {
            // If wallet balance is enough to cover the discounted amount, show "Online Payment" and hide "Cash on Delivery"
            return false;
          } else {
            // If wallet balance is not enough to cover the discounted amount, show only "Online Payment"
            return true;
          }
        } else {
          // If "Use wallet balance" checkbox is not checked and the total price is above the threshold, hide "Cash on Delivery"
          if (totalPrice > cashOnDeliveryThreshold) {
            cashOnDeliveryError.style.display = 'block';
            return true;
          } else {
            // Otherwise, show the "Cash on Delivery" option
            cashOnDeliveryError.style.display = 'none';
            return false;
          }
        }
      }

      useWalletCheckbox.addEventListener('change', function () {
        const totalPrice = parseFloat(totalPriceElement.textContent);
        const walletBalanceElement = document.getElementById('walletBalance');
        const paymentMethodSelect = document.getElementById('paymentMethod');
        const discountAmount = parseFloat(document.getElementById("discountedAmount").textContent);
        const originalTotal = parseFloat(document.getElementById("originalTotalPrice").value);

        if (this.checked) {
          // Calculate how much of the wallet balance will be used
          const walletAmountToUse = Math.min(currentWalletBalance, totalPrice);
          const remainingAmount = totalPrice - walletAmountToUse;
          
          // Update displays
          totalPriceElement.textContent = remainingAmount.toFixed(2);
          const remainingWalletBalance = currentWalletBalance - walletAmountToUse;
          walletBalanceElement.textContent = remainingWalletBalance.toFixed(2);

          // Handle payment method selection
          if (remainingAmount === 0) {
            // If wallet covers entire amount
            paymentMethodSelect.value = 'pay_by_wallet';
            paymentMethodSelect.disabled = true;
            checkoutButton.disabled = false;
          } else {
            // If partial wallet payment
            paymentMethodSelect.value = 'pay_on_online';
            paymentMethodSelect.disabled = false;
            
            // Hide cash on delivery option for partial wallet payments
            const cashOnDeliveryOption = paymentMethodSelect.querySelector('option[value="cash_on_delivery"]');
            cashOnDeliveryOption.style.display = 'none';
          }

        } else {
          // Reset wallet-related values
          paymentMethodSelect.value = '';
          walletBalanceElement.textContent = initialWalletBalance;
          paymentMethodSelect.disabled = false;
          currentWalletBalance = parseFloat(initialWalletBalance);

          // Calculate total with coupon discount but without wallet
          const totalWithDiscount = originalTotal - discountAmount;
          totalPriceElement.textContent = totalWithDiscount.toFixed(2);

          // Show all payment options again
          const cashOnDeliveryOption = paymentMethodSelect.querySelector('option[value="cash_on_delivery"]');
          const onlinePaymentOption = paymentMethodSelect.querySelector('option[value="pay_on_online"]');
          
          if (totalWithDiscount <= 1000) {
            cashOnDeliveryOption.style.display = 'block';
          }
          onlinePaymentOption.style.display = 'block';
        }

        // Update payment options based on new total
        updatePaymentOptions();
      });

      const cashOnDeliveryOption = paymentMethodSelect.querySelector('option[value="cash_on_delivery"]');
      if (shouldHideCashOnDelivery()) {
        cashOnDeliveryOption.style.display = 'none';
      } else {
        cashOnDeliveryOption.style.display = 'block';
      }
    </script>
    <script>
      const RAZORPAY_KEY_ID = '<%= RAZORPAY_KEY_ID %>';

    </script>

    <script>

      document.addEventListener("DOMContentLoaded", function () {
        const checkoutButton = document.getElementById("checkoutButton");
        const paymentMethodSelect = document.getElementById("paymentMethod");

        // Add event listener to the checkout button
        checkoutButton.addEventListener("click", function (event) {
          const addressSelect = document.getElementById("address");
          const addressError = document.getElementById("addressError");

          if (!addressSelect.value) {
            event.preventDefault(); // Prevent form submission
            addressError.style.display = "block"; // Show the error message
          } else {
            addressError.style.display = "none"; // Hide the error message
            const selectedPaymentMethod = paymentMethodSelect.value;

            if (selectedPaymentMethod === "pay_on_online") {
              // If the payment method is "Online Payment," initiate Razorpay checkout
              initiateRazorpayCheckout();
            } else {
              // Otherwise, submit the form
              submitForm();
            }
          }
        });
      });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const applyCouponBtn = document.getElementById("applyCouponBtn");
        const clearCouponBtn = document.getElementById("clearCouponBtn");
        const couponInput = document.getElementById("coupon");
        const couponMessage = document.getElementById("couponMessage");
        const addressSelect = document.getElementById("address");

        // Apply Coupon Function
        async function applyCoupon() {
          // First check if address exists
          if (!addressSelect || !addressSelect.value) {
            showMessage("Please add a shipping address before applying coupon", "error");
            couponInput.disabled = true;
            return;
          }

          const couponCode = couponInput.value.trim();

          if (!couponCode) {
            showMessage("Please enter a coupon code", "error");
            return;
          }

          try {
            const response = await fetch("/apply-coupon", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ 
                coupon: couponCode,
                hasAddress: Boolean(addressSelect?.value)
              }),
            });

            const data = await response.json();

            if (data.success) {
              // Uncheck wallet checkbox silently
              const useWalletCheckbox = document.getElementById("useWalletCheckbox");
              if (useWalletCheckbox.checked) {
                useWalletCheckbox.checked = false;
                // Trigger change event to update UI
                const event = new Event('change');
                useWalletCheckbox.dispatchEvent(event);
              }

              updatePriceDisplay(data.discountAmount, data.discountedTotalPrice);
              showMessage(data.message, "success");
              
              couponInput.disabled = true;
              applyCouponBtn.style.display = "none";
              clearCouponBtn.style.display = "inline-block";
              
              document.getElementById("discountedAmountInput").value = data.discountAmount;
              document.getElementById("totalPriceInput").value = data.discountedTotalPrice;
              
              updatePaymentOptions();
            } else {
              showMessage(data.message || "Invalid coupon code", "error");
              couponInput.disabled = false;
              applyCouponBtn.style.display = "inline-block";
              clearCouponBtn.style.display = "none";
            }
          } catch (error) {
            console.error("Error:", error);
            showMessage("Error applying coupon. Please try again.", "error");
            couponInput.disabled = false;
            applyCouponBtn.style.display = "inline-block";
            clearCouponBtn.style.display = "none";
          }
        }

        // Add address change listener
        if (addressSelect) {
          addressSelect.addEventListener('change', function() {
            if (this.value) {
              couponInput.disabled = false;
              couponMessage.style.display = "none";
            } else {
              couponInput.disabled = true;
              showMessage("Please add a shipping address before applying coupon", "error");
            }
          });

          // Initial check for address
          if (!addressSelect.value) {
            couponInput.disabled = true;
            showMessage("Please add a shipping address before applying coupon", "error");
          }
        }

        // Show Message Function with improved styling
        function showMessage(message, type) {
          couponMessage.textContent = message;
          couponMessage.style.display = "block";
          couponMessage.style.padding = "10px";
          couponMessage.style.marginTop = "10px";
          couponMessage.style.borderRadius = "4px";
          
          if (type === "success") {
            couponMessage.style.backgroundColor = "#d4edda";
            couponMessage.style.color = "#155724";
            couponMessage.style.border = "1px solid #c3e6cb";
            setTimeout(() => {
              couponMessage.style.display = "none";
            }, 3000);
          } else {
            couponMessage.style.backgroundColor = "#f8d7da";
            couponMessage.style.color = "#721c24";
            couponMessage.style.border = "1px solid #f5c6cb";
          }
        }

        // Add event listeners
        applyCouponBtn.addEventListener("click", applyCoupon);
        clearCouponBtn.addEventListener("click", clearCoupon);

        // Listen for changes in the coupon input field
        couponInput.addEventListener("input", function () {
          if (!addressSelect || !addressSelect.value) {
            this.disabled = true;
            showMessage("Please add a shipping address before applying coupon", "error");
            return;
          }
          
          couponMessage.style.display = "none";
          if (!this.value.trim()) {
            applyCouponBtn.style.display = "inline-block";
            clearCouponBtn.style.display = "none";
            
            const originalTotalPrice = document.getElementById("originalTotalPrice").value;
            updatePriceDisplay(0, parseFloat(originalTotalPrice));
          }
        });
      });
    </script>

    <script>
      function updateProductPriceDetails(discountAmount, discountedTotalPrice) {
        const discountedAmountElement = document.getElementById("discountedAmount");
        const totalPriceElement = document.getElementById("totalPrice");

        discountedAmountElement.textContent = discountAmount.toFixed(2);
        totalPriceElement.textContent = discountedTotalPrice.toFixed(2);

        // Update the hidden input fields
        const discountedAmountInput = document.getElementById("discountedAmountInput");
        const totalPriceInput = document.getElementById("totalPriceInput");
        discountedAmountInput.value = discountAmount;
        totalPriceInput.value = discountedTotalPrice;

        const cashOnDeliveryOption = paymentMethodSelect.querySelector('option[value="cash_on_delivery"]');
        cashOnDeliveryOption.disabled = shouldHideCashOnDelivery();
      }

      function resetProductPriceDetails() {
        const discountedAmountElement = document.getElementById("discountedAmount");
        const totalPriceElement = document.getElementById("totalPrice");

        // Reset the product price details
        discountedAmountElement.textContent = "0.00";
        totalPriceElement.textContent = "<%= totalPrice %>"; // Reset to the original total price

        // Reset the hidden input fields
        const discountedAmountInput = document.getElementById("discountedAmountInput");
        const totalPriceInput = document.getElementById("totalPriceInput");
        discountedAmountInput.value = 0;
        totalPriceInput.value = "<%= totalPrice %>"; // Reset to the original total price
      }


      function submitForm() {
        const totalPrice = parseFloat(document.getElementById("totalPrice").textContent);
        const useWallet = document.getElementById("useWalletCheckbox").checked;
        const walletBalance = parseFloat(document.getElementById("walletBalance").textContent);
        const paymentMethod = document.getElementById("paymentMethod").value;
        
        // Validate payment method selection
        if (paymentMethod === "") {
          swal("Please select a payment method.", "", "warning");
          return;
        }

        // Validate cash on delivery limit
        if (paymentMethod === 'cash_on_delivery' && totalPrice > 1000) {
          swal("Cash on delivery not available for orders above â‚¹1000", "", "warning");
          return;
        }

        const form = document.querySelector("form[action='/checkout/place-order']");
        if (!form) {
          console.error('Form not found');
          return;
        }

        // Add payment details to form
        const formData = new FormData(form);
        formData.append("paymentMethod", paymentMethod);
        formData.append("useWallet", useWallet);
        formData.append("walletAmountUsed", useWallet ? Math.min(walletBalance, parseFloat('<%= totalPrice %>')) : 0);
        formData.append("remainingAmount", totalPrice);

        // Convert FormData to hidden inputs
        for (let [key, value] of formData.entries()) {
          const input = document.createElement("input");
          input.type = "hidden";
          input.name = key;
          input.value = value;
          form.appendChild(input);
        }

        // Submit the form
        form.submit();
      }
    </script>
    <!-- Razorpay Script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
      // Function to initiate Razorpay checkout
      function initiateRazorpayCheckout() {
        const coupon = document.getElementById("coupon").value;
        const amount = document.getElementById('totalPrice').textContent;
        const discountedAmount = document.getElementById("discountedAmount").textContent;
        const useWallet = document.getElementById("useWalletCheckbox").checked;

        // Create the orderRazerpay object
        const orderRazerpay = {
          amount,
          coupon,
          discountedAmount,
          useWallet: useWallet.toString()
        };



        // Fetch and process the payment
        fetch('/create-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ amount, orderRazerpay }),
        })
          .then((response) => response.json())
          .then((data) => {
            const options = {
              key: RAZORPAY_KEY_ID,
              amount: data.amount,
              currency: 'INR',
              name: '4WATCHES',
              description: 'Your order Transaction',
              image: '/images/logo.png',
              order_id: data.id,
              handler: function (response) {
                console.log(response);
                processPayment(response);
              },
              prefill: {
                name: '<%= fullName %>',
                email: "<%= user.name %>",
                contact: "<%= user.phone %>",
              },
              notes: {
                addresses: '<%=user.address%>',
              },
              theme: {
                color: '#bca374',
              },
            };

            var rzp1 = new Razorpay(options);

            rzp1.on('payment.failed', function (response) {
              swal("Payment Unsuccessful", "", "error")
              handlePaymentFailure(orderRazerpay, amount);
            });

            rzp1.open();
          })
          .catch((error) => {
            console.error(error);
            rzp1.end();
          });
      }

      // Function to handle payment failure
      function handlePaymentFailure(orderRazerpay, amount) {
        fetch('/payment-fail', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ orderRazerpay, amount }),
        })
          .then(response => response.text())
          .then(html => {
            document.documentElement.innerHTML = html;

            // Start countdown after failure page is loaded
            startCountdown();
          })
          .catch(error => {
            console.error('Error handling payment failure:', error);
            window.location.href = '/orders';
          });
      }

      function processPayment(paymentResponse) {
        fetch('/process-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ paymentResponse }),
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Payment processing failed');
            }
            return response.text();
          })
          .then(html => {
            // Replace the entire page content with the response
            document.documentElement.innerHTML = html;

            // Start countdown after page content is replaced
            startCountdown();
          })
          .catch(error => {
            console.error(error);
            // Handle failure
            fetch('/payment-fail', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              }
            })
              .then(response => response.text())
              .then(html => {
                document.documentElement.innerHTML = html;

                // Start countdown after failure page is loaded
                startCountdown();
              });
          });
      }

      // Add this function for countdown
      function startCountdown() {
        const countdownElement = document.getElementById('countdown');
        if (!countdownElement) return;

        let timeLeft = 5;

        function updateCountdown() {
          countdownElement.textContent = timeLeft;
          if (timeLeft <= 0) {
            window.location.href = '/orders';
          } else {
            timeLeft--;
            setTimeout(updateCountdown, 1000);
          }
        }

        updateCountdown();
      }
    </script>

    <script>
      // Add the missing updatePaymentOptions function
      function updatePaymentOptions() {
        const totalPrice = parseFloat(document.getElementById("totalPrice").textContent);
        const paymentMethodSelect = document.getElementById("paymentMethod");
        const cashOnDeliveryOption = paymentMethodSelect.querySelector('option[value="cash_on_delivery"]');
        const cashOnDeliveryError = document.getElementById("cashOnDeliveryError");
        const useWalletCheckbox = document.getElementById("useWalletCheckbox");
        const walletBalance = parseFloat(document.getElementById("walletBalance").textContent);
        const walletOption = paymentMethodSelect.querySelector('option[value="pay_by_wallet"]');

        // Handle cash on delivery option
        if (totalPrice > 1000 || useWalletCheckbox.checked) {
          cashOnDeliveryOption.disabled = true;
          cashOnDeliveryOption.style.display = 'none';
          if (totalPrice > 1000) {
            cashOnDeliveryError.style.display = 'block';
          }
          
          // Reset to online payment if COD was selected
          if (paymentMethodSelect.value === 'cash_on_delivery') {
            paymentMethodSelect.value = 'pay_on_online';
          }
        } else {
          cashOnDeliveryOption.disabled = false;
          cashOnDeliveryOption.style.display = 'block';
          cashOnDeliveryError.style.display = 'none';
        }

        // Handle wallet payment option
        if (useWalletCheckbox.checked) {
          if (walletBalance >= totalPrice) {
            // Full wallet payment
            walletOption.hidden = false;
            paymentMethodSelect.value = 'pay_by_wallet';
            paymentMethodSelect.disabled = true;
          } else if (walletBalance > 0) {
            // Partial wallet payment
            walletOption.hidden = true;
            paymentMethodSelect.value = 'pay_on_online';
            paymentMethodSelect.disabled = false;
            cashOnDeliveryOption.style.display = 'none';
          }
        } else {
          // No wallet payment
          walletOption.hidden = true;
          paymentMethodSelect.disabled = false;
        }
      }
    </script>

    <script>
      // Add this function to handle clearing the coupon
      function clearCoupon() {
        // Get elements
        const couponInput = document.getElementById("coupon");
        const applyCouponBtn = document.getElementById("applyCouponBtn");
        const clearCouponBtn = document.getElementById("clearCouponBtn");
        const couponMessage = document.getElementById("couponMessage");
        const originalTotalPrice = document.getElementById("originalTotalPrice").value;

        // Reset coupon input
        couponInput.value = "";
        couponInput.disabled = false;

        // Show apply button, hide clear button
        applyCouponBtn.style.display = "inline-block";
        clearCouponBtn.style.display = "none";

        // Clear any messages
        couponMessage.style.display = "none";
        couponMessage.textContent = "";

        // Reset prices to original values
        updatePriceDisplay(0, parseFloat(originalTotalPrice));

        // Reset hidden inputs
        document.getElementById("discountedAmountInput").value = "0";
        document.getElementById("totalPriceInput").value = originalTotalPrice;

        // Update payment options
        updatePaymentOptions();
      }

      // Update the DOMContentLoaded event listener to add the clear coupon button handler
      document.addEventListener("DOMContentLoaded", function () {
        const applyCouponBtn = document.getElementById("applyCouponBtn");
        const clearCouponBtn = document.getElementById("clearCouponBtn");
        const couponInput = document.getElementById("coupon");

        applyCouponBtn.addEventListener("click", applyCoupon);
        clearCouponBtn.addEventListener("click", clearCoupon);

        // Listen for changes in the coupon input field
        couponInput.addEventListener("input", function () {
          if (!couponInput.value.trim()) {
            resetProductPriceDetails();
            applyCouponBtn.style.display = "inline-block";
            clearCouponBtn.style.display = "none";
          }
        });
      });
    </script>

    <script>
      // Add this function to update price display
      function updatePriceDisplay(discountAmount, discountedTotalPrice) {
        // Get all the price elements
        const subtotalElement = document.getElementById("subtotal");
        const discountedAmountElement = document.getElementById("discountedAmount");
        const taxElement = document.getElementById("tax");
        const totalPriceElement = document.getElementById("totalPrice");
        
        // Convert discountedTotalPrice to number if it's a string
        const newTotal = parseFloat(discountedTotalPrice);
        
        // Calculate new subtotal (reverse engineer from total)
        const newSubtotal = ((newTotal - 45) / 1.05).toFixed(2);
        
        // Calculate new tax
        const newTax = (newSubtotal * 0.05).toFixed(2);
        
        // Update the display elements
        subtotalElement.textContent = newSubtotal;
        discountedAmountElement.textContent = discountAmount.toFixed(2);
        taxElement.textContent = newTax;
        totalPriceElement.textContent = newTotal.toFixed(2);
        
        // Update hidden inputs
        document.getElementById("discountedAmountInput").value = discountAmount;
        document.getElementById("totalPriceInput").value = newTotal;
        
        // Update payment options based on new total
        updatePaymentOptions();
        
        // If using wallet, update the wallet display
        const useWalletCheckbox = document.getElementById("useWalletCheckbox");
        if (useWalletCheckbox.checked) {
          const walletBalance = parseFloat(document.getElementById("walletBalance").textContent);
          const remainingAmount = Math.max(0, newTotal - walletBalance);
          if (remainingAmount === 0) {
            document.getElementById("paymentMethod").value = 'pay_by_wallet';
            document.getElementById("paymentMethod").disabled = true;
          }
          document.getElementById("totalPrice").textContent = remainingAmount.toFixed(2);
        }
      }
    </script>

</body>

</html>